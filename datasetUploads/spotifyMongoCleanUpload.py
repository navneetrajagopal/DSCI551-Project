# -*- coding: utf-8 -*-
"""SpotiftMongoUpload.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vB5p9CyjyqQaEYkmxVKIVzyr7IF4PWNh
"""

# !pip install pymongo

import pandas as pd
import re
import uuid
from pymongo import MongoClient
from pymongo.server_api import ServerApi

# to clean the column names, there were errors with using them in queries with raw upload
def to_snake_case(s):
    s = re.sub(r"[^\w\s]", "", s)  # Remove special characters like ()
    s = re.sub(r"\s+", "_", s)     # Replace spaces with underscores
    return s.lower()

def clean(df):
    df.columns = [to_snake_case(col) for col in df.columns]
    return df

spotify = pd.read_csv('/content/spotify_dataset.csv')
spotify = spotify.sample(frac=0.25, random_state=42)
spotify = spotify[spotify['Release Date'].notna()]

spotify = clean(spotify)
spotify['song_id'] = [str(uuid.uuid4()) for _ in range(len(spotify))]
spotify.info()

uri = "mongodb+srv://vyomsari:9K99qXIzSkleWhab@dsci551project.y8pipzy.mongodb.net/?retryWrites=true&w=majority&appName=dsci551Project"

# Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))

# Send a ping to confirm a successful connection
try:
    client.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)

# want 3 collections
# songs, features, reccomendations
songs_df = spotify[[
    "song_id", "song", "artists", "length", "album", "genre", "release_date", "key", "tempo",
    "loudness_db", "time_signature", "explicit", "popularity"
]]

features_df = spotify[[
    "song_id", "energy", "danceability", "positiveness", "speechiness", "liveness",
    "acousticness", "instrumentalness", "good_for_party", "good_for_workstudy",
    "good_for_relaxationmeditation", "good_for_exercise", "good_for_running",
    "good_for_yogastretching", "good_for_driving", "good_for_social_gatherings",
    "good_for_morning_routine"
]]

recommendations_df = spotify[[
    "song_id", "similar_artist_1", "similar_song_1", "similarity_score_1",
    "similar_artist_2", "similar_song_2", "similarity_score_2",
    "similar_artist_3", "similar_song_3", "similarity_score_3"
]]

songs_df.info()

features_df.info()

recommendations_df.info()

db = client['music_db']
db.songs.insert_many(songs_df.to_dict(orient="records"))
db.features.insert_many(features_df.to_dict(orient="records"))
db.recommendations.insert_many(recommendations_df.to_dict(orient="records"))